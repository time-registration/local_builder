#!/bin/env php
<?php
/**
 * @author net_bazzline_create_executable_command_line_file
 * @since 2015-11-26
 */

//begin of including composer autoload.php
$possiblePathsToComposerAutoloadFile = array(
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php'
);
$pathToAutoloadFileNotFound = true;
$pathToAutoloadFile         = null;
foreach ($possiblePathsToComposerAutoloadFile as $path) {
    if (file_exists($path)) {
        $pathToAutoloadFile         = $path;
        $pathToAutoloadFileNotFound = false;
        break;
    }
}
if ($pathToAutoloadFileNotFound) {
    echo 'could not find composer autoload.php, no composer installed?' . PHP_EOL;
    exit(1);
}

require_once $pathToAutoloadFile;
//end of including composer autoload.php

use Net\Bazzline\Component\Cli\Environment\CommandLineEnvironment;
use Net\Bazzline\TimeRegistration\LocalBuilder\Utility\ApplicationLocator;

$environment    = new CommandLineEnvironment($argv);
$usage          = basename(__FILE__) . ' <subject> <description> [-v|--verbose]';

$environment->execute(
    function (CommandLineEnvironment $environment) {
        //begin of dependencies
        $arguments      = $environment->getArguments();
        $locator        = new ApplicationLocator();
        $configuration  = $locator->getConfiguration();
        $values         = $arguments->getValues();
        //end of dependencies

        $valuesNotAreValid = (!count($values) == 2);

        //begin of argument validation
        if ($valuesNotAreValid) {
            throw new InvalidArgumentException(
                'invalid number of arguments provided'
            );
        }

        $description        = $values[1];
        $subject            = $values[0];
        $subjectIsToLong    = (strlen($subject) > $configuration->getFixedCharacterNumberOfSubjectSection());

        if ($subjectIsToLong) {
            throw new InvalidArgumentException(
                'provided subject is to long, maximum character length is ' .
                    $configuration->getFixedCharacterNumberOfSubjectSection()
            );
        }
        //end of argument validation

        //put in your business logic
        $timestamp              = time();
        $collection             = $locator->getCollectionOfEntries();
        $currentCalendarWeek    = date('W', $timestamp);

        $collection->setName($currentCalendarWeek);
        $collection->addEntry($description, $subject, $timestamp);
        $collection->persist();

        $environment->outputIfVerbosityIsEnabled('added content to file:');
        $environment->outputIfVerbosityIsEnabled('to file:');
        $environment->outputIfVerbosityIsEnabled(basename($collection->getFilePath()));
    },
    $usage
);
