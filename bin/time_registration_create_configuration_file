#!/bin/env php
<?php
/**
 * @author net_bazzline_create_executable_command_line_file
 * @since 2015-11-26
 */

//begin of including composer autoload.php
$possiblePathsToComposerAutoloadFile = array(
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php'
);
$pathToAutoloadFileNotFound = true;
$pathToAutoloadFile         = null;
foreach ($possiblePathsToComposerAutoloadFile as $path) {
    if (file_exists($path)) {
        $pathToAutoloadFile         = $path;
        $pathToAutoloadFileNotFound = false;
        break;
    }
}
if ($pathToAutoloadFileNotFound) {
    echo 'could not find composer autoload.php, no composer installed?' . PHP_EOL;
    exit(1);
}

require_once $pathToAutoloadFile;
//end of including composer autoload.php

use Net\Bazzline\Component\Cli\Environment\CommandLineEnvironment;
use Net\Bazzline\TimeRegistration\LocalBuilder\Configuration\Configuration;
use Net\Bazzline\TimeRegistration\LocalBuilder\Utility\ApplicationLocator;

$environment    = new CommandLineEnvironment($argv);
$usage			= basename(__FILE__) . ' [-v|--verbose]';

$environment->execute(
    function (CommandLineEnvironment $environment) {
        //start of dependencies
        $locator    = new ApplicationLocator();
        $filesystem = $locator->getFilesystem();
        //end of dependencies

        //@todo
        //--add optional parameter to provide the user home
        //--add optional flag to --force (overwrite) --update (try to update)
        $pathToCurrentUserHome  = $filesystem->getPathToCurrentUserHome();
        $pathToConfiguration    = Configuration::RELATIVE_DIRECTORY_PATH;
        $configurationFileName  = Configuration::FILE_NAME;
        $fullQualifiedPath      = $pathToCurrentUserHome . '/' . $pathToConfiguration;
        $fullQualifiedFilePath  = $fullQualifiedPath . '/' . $configurationFileName;

        $configurationFileDoesExist = $filesystem->isFileAvailable($fullQualifiedFilePath);

        if ($configurationFileDoesExist) {
            throw new RuntimeException(
                'configuration file already exists'
            );
        } else {
            $environment->outputIfVerbosityIsEnabled('creating configuration file');
            $configurationPathDoesNotExist = (!$filesystem->isDirectoryAvailable($fullQualifiedPath));

            if ($configurationPathDoesNotExist) {
                $filesystem->createDirectoryOrThrowRuntimeException($fullQualifiedPath);
                $environment->outputIfVerbosityIsEnabled('created path');
            }

                $content = '<?php
/**
 * @author ' . basename(__FILE__) . '
 * @since ' . date('Y-m-d') . '
 */

return array(
    \'fixed_character_number_of_subject_section\'   => 8,
    \'path_to_store_the_data\'                      => __DIR__ . \'/../data\',
    \'prefix_for_current_day\'                      => \'_\',
    \'version\'                                     => 0
);
';

            $filesystem->writeFileContentOrThrowRuntimeException($fullQualifiedFilePath, $content);

            $environment->outputIfVerbosityIsEnabled('finished');
            $environment->outputIfVerbosityIsEnabled('path:');
            $environment->outputIfVerbosityIsEnabled('"' . $fullQualifiedFilePath . '"');
        }
    },
    $usage
);